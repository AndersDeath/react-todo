{"version":3,"sources":["services/IdGen/IdGen.ts","entities/Item/Item.ts","entities/List/List.ts","store/actionTypes.ts","store/actionCreators.ts","store/selectors.ts","components/AddInput/AddInput.tsx","interfaces.ts","components/ItemInfoPopup/ItemInfoPopup.tsx","components/ItemsListBtn/ItemsListBtn.tsx","components/ItemsListItem/ItemsListItem.tsx","components/ItemsList/ItemsList.tsx","components/ListAddPopup/ListAddPopup.tsx","components/App/App.tsx","reportWebVitals.ts","store/reducer.ts","index.tsx"],"names":["IdGenClass","id","this","listIdGen","itemIdGen","date","Date","defaultItemData","key","get","title","status","done","body","datetime","toISOString","createItem","input","createList","comment","items","addItemToList","list","item","push","updateItemIntoList","length","map","e","ADD_LIST","UPDATE_LIST","SET_CURRENT_LIST_ID","updateItemIntoListAction","simulateHttpRequest","type","actionTypes","action","dispatch","setTimeout","getLists","state","lists","getCurrentListId","currentListId","getItem","itemId","listId","el","find","l","undefined","getList","AddInput","props","useState","setInput","useSelector","useDispatch","addItem","useCallback","addItemToListAction","className","onClick","icon","faPlusCircle","value","onKeyUp","event","code","onChange","val","target","STATUS_REMOVED","ItemInfoPopup","setItem","updateItem","fragment","show","defaultValue","toString","closeHandler","ItemsListBtn","preventDefault","stopPropagation","handler","fontAwesomIconLink","ItemsListItem","setVal","showPopup","setShowPopup","style","faSquare","isDisabled","faCheckSquare","toggleDoneHandler","disabled","faInfoCircle","removeHandler","faTrash","restoreHandler","faTrashRestore","ItemsList","ListAddPopup","App","addList","addListAction","setCurrentListId","setCurrentListIdAction","activeItems","removedItems","forEach","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultListData1","store","createStore","combineReducers","concat","updatedLists","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.268885d8.chunk.js","sourcesContent":["export class IdGenClass {\n    private id = 0;\n\n    get() {\n        ++this.id;\n        return this.id;\n    }\n\n    current() {\n        return this.id;\n    }\n\n}\n\nconst listIdGen = new IdGenClass();\nconst itemIdGen = new IdGenClass();\n\nexport { listIdGen, itemIdGen };","import { IItem } from \"../../interfaces\";\nimport { itemIdGen } from \"../../services/IdGen/IdGen\";\n\nlet date = new Date();\nexport const defaultItemData: IItem[] = [\n  {\n    key: itemIdGen.get(),\n    title: 'first',\n    status: '',\n    done: false,\n    body: '',\n    datetime: date.toISOString()\n  },\n  {\n    key: itemIdGen.get(),\n    title: 'second',\n    status: '',\n    done: false,\n    body: '',\n    datetime: date.toISOString()\n  },\n  {\n    key: itemIdGen.get(),\n    title: 'third ',\n    status: '',\n    done: false,\n    body: '',\n    datetime: date.toISOString()\n  },\n  \n];\n\nexport function createItem(input: string, body?: string): IItem {\n    const date = new Date();\n    return {\n        key: itemIdGen.get(),\n        title: input,\n        status: '',\n        done: false,\n        body: body || '',\n        datetime: date.toISOString()\n      }\n}\n","import { IItem, IList } from '../../interfaces';\nimport { itemIdGen, listIdGen } from \"../../services/IdGen/IdGen\";\n\nlet date = new Date();\nexport const defaultListData: IList[] = [\n  {\n    key: itemIdGen.get(),\n    title: 'first',\n    status: '',\n    comment: '',\n    items: [],\n    datetime: date.toISOString()\n  },\n  {\n    key: itemIdGen.get(),\n    title: 'second',\n    status: '',\n    comment: '',\n    items: [],\n    datetime: date.toISOString()\n  },\n  {\n    key: itemIdGen.get(),\n    title: 'third',\n    status: '',\n    comment: '',\n    items: [],\n    datetime: date.toISOString()\n  },\n  \n];\n\nexport function createList(input: string, comment?: string): IList {\n    const date = new Date();\n    return  {\n        key: listIdGen.get(),\n        title: input,\n        status: '',\n        comment: comment || '',\n        items: [],\n        datetime: date.toISOString()\n      }\n}\n\nexport function addItemToList(list: IList, item: IItem): IList {\n  list.items.push(item);\n  return list;\n}\n\nexport function updateItemIntoList(list: IList, item: IItem): IList {\n  if(list.items.length === 0) {\n    return list;\n  }\n  list.items.map((e: IItem) => {\n    if(e.key === item.key) {\n      e = item;\n    }\n    return e;\n  });\n  return list;\n}","export const ADD_ITEM = \"ADD_ITEM\"\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\nexport const SET_STATUS = \"SET_STATUS\";\nexport const UPDATE_ITEM = \"UPDATE_ITEM\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport const UPDATE_LIST = \"UPDATE_LIST\";\n\nexport const SET_CURRENT_LIST_ID = \"SET_CURRENT_LIST_ID\";\n","import { CurrentListIdAction, DispatchType2, IList, ListAction } from \"../interfaces\"\nimport * as actionTypes from \"./actionTypes\"\n\n\nexport function addListAction(list: IList) {\n  const action: ListAction = {\n    type: actionTypes.ADD_LIST,\n    list,\n  }\n\n  return simulateHttpRequest(action)\n}\n\nexport function addItemToListAction(list: IList) {\n  const action: ListAction = {\n    type: actionTypes.UPDATE_LIST,\n    list,\n  }\n\n  return simulateHttpRequest(action)\n}\n\nexport function updateItemIntoListAction(list: IList) {\n  const action: ListAction = {\n      type: actionTypes.UPDATE_LIST,\n      list,\n  }\n  return simulateHttpRequest(action)\n}\n\nexport function setCurrentListIdAction(listId: number) {\n  const action: CurrentListIdAction = {\n    type: actionTypes.SET_CURRENT_LIST_ID,\n    listId,\n  }\n\n  return (dispatch: any) => {\n    dispatch(action)\n  }\n}\n\nexport function simulateHttpRequest(action: ListAction) {\n  return (dispatch: DispatchType2) => {\n    setTimeout(() => {\n      dispatch(action)\n    }, 100)\n  }\n}","import { createList } from \"../entities/List\";\nimport { IItem, IList, ItemState, MainState } from \"../interfaces\";\n\nexport const getItems = (state: ItemState) => state.items;\n\nexport const getLists = (state: MainState) => {\n  return state.lists.lists;\n}\n\n\nexport const getCurrentListId = (state: MainState) => {\n  return state.currentListId.currentListId;\n}\n\nexport const getItem =\n  (itemId: number, listId: number) => \n  ( el: MainState ) => {\n    const list = el.lists.lists.find((l: IList) => {\n      return l.key === listId;\n    });\n    if(list !== undefined) {\n      return list.items.find((item: IItem) => item.key === itemId);\n    }\n    return {};\n  }\n  \n  export const getList =\n  (listId: number) => \n  ( el: MainState ) => {\n    const list = el.lists.lists.find((l: IList) => {\n      return l.key === listId;\n    });\n    if (list === undefined) {\n      return  createList('')\n    }\n    return list;\n  }\n  \n","import { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { Dispatch, KeyboardEvent, useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createItem } from \"../../entities/Item\";\nimport { addItemToList } from \"../../entities/List\";\nimport { IList } from \"../../interfaces\";\nimport { addItemToListAction } from \"../../store/actionCreators\";\nimport { getList } from \"../../store/selectors\";\n\nexport function AddInput(props: {listId:number}) {\n    const [input, setInput] = useState<string>('')\n    const list: any = useSelector(getList(props.listId));\n\n    function inputOnChange(val: React.ChangeEvent<HTMLInputElement>) {\n        setInput(val.target.value);\n    }\n\n    function onKeyDownHandler(event: KeyboardEvent) {\n        if (event.code === 'Enter') {\n            addItem(addItemToList(list, createItem(input)));\n            setInput('')\n        }\n    }\n\n    const dispatch: Dispatch<any> = useDispatch()\n\n    const addItem = useCallback(\n      (list: IList) => dispatch(addItemToListAction(list)),\n      [dispatch]\n    )\n\n    return <div className=\"input\">\n        <button onClick={() => {\n            addItem(addItemToList(list, createItem(input)));\n            setInput('')\n        }}>\n            <FontAwesomeIcon icon={faPlusCircle} />\n        </button>\n        <input value={input} onKeyUp={onKeyDownHandler} onChange={inputOnChange} type=\"search\" />\n    </div>\n}\n","\nexport const STATUS_TODO = 'status_todo';\nexport const STATUS_DONE = 'status_done';\nexport const STATUS_REMOVED = 'status_removed';\nexport const STATUS_RESTORED = 'status_restored';\n\nexport interface IItem {\n  key: number;\n  title: string;\n  status: string;\n  done: boolean;\n  body: string;\n  datetime: string;\n}\n\nexport interface IList {\n  key: number;\n  title: string;\n  status: string;\n  comment: string;\n  datetime: string;\n  items: IItem[];\n}\n\nexport type ItemAction = {\n  type: string\n  item: IItem\n}\n\nexport type ListAction = {\n  type: string;\n  list: IList;\n}\nexport type CurrentListIdAction = {\n  type: string;\n  listId: number;\n}\n\nexport type ItemState = {\n  items: IItem[]\n}\n\nexport type MainState = {\n  lists: ListState\n  currentListId: CurrentListIdState;\n}\n\nexport type ListState = {lists:IList[]};\n\nexport type CurrentListIdState = {\n  currentListId: number;\n};\n\n\nexport type DispatchType = (args: ItemAction) => ItemAction\n\nexport type DispatchType2 = (args: ListAction) => ListAction\n","import { Dispatch, useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateItemIntoList } from '../../entities/List';\nimport { IList } from '../../interfaces';\nimport { updateItemIntoListAction } from '../../store/actionCreators';\nimport { getItem } from '../../store/selectors';\nimport './ItemInfoPopup.scss';\n\nexport function ItemInfoPopup(props: any) {\n\n    const el: any = useSelector(getItem(props.item.key, props.list.key));\n    const [item, setItem] = useState(el);\n  \n    const dispatch: Dispatch<any> = useDispatch()\n\n    const updateItem = useCallback(\n      (list: IList) => dispatch(updateItemIntoListAction(list)),\n      [dispatch]\n    )\n\n    function titleOnChange(val: React.ChangeEvent<HTMLInputElement>) {\n        item.title = val.target.value;\n        setItem(item);\n        updateItem(updateItemIntoList(props.list, item));\n    }\n\n    function bodyOnChange(val: React.ChangeEvent<HTMLTextAreaElement>) {\n        item.body = val.target.value;\n        setItem(item);\n        updateItem(updateItemIntoList(props.list, item));\n    }\n\n    let fragment = <></>;\n    if(props.show) {\n        fragment =  <div className=\"item-info-popup active\">\n        <div className=\"item-info-popup__overlay\">\n            <div className=\"item-info-popup__container\">\n                <div className=\"item-info-popup__header\">\n                    <span className=\"icon icon-close\">\n                        \n                    </span>\n                </div>\n                <div className=\"item-info-popup__body\">\n                    <input type=\"text\" className=\"text-input-popup\" defaultValue={item.title} onChange={titleOnChange}/>\n                    <textarea className=\"text-input-textarea\" defaultValue={item.body} onChange={bodyOnChange}>\n                    </textarea>\n                    Date: {item.datetime} <br/>\n                    Done:  {item.done.toString()} <br/>\n                    Status:  {item.status.toString()} <br/>\n                </div>\n                <div className=\"item-info-popup__bottom\">\n                    <div className=\"btn-area\">\n                        <button className=\"btn\" onClick={() => {\n                                props.closeHandler(item.title)\n                            }}>\n                            Close\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>;\n    }\n    return (<>{fragment}</>);\n}","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport function ItemsListBtn(props: any) {\n    return (<span className={props.className} onClick={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        props.handler(props.item);\n      }}>\n        <FontAwesomeIcon icon={props.fontAwesomIconLink} />\n    </span>\n    )\n}","import { faCheckSquare, faInfoCircle, faSquare, faTrash, faTrashRestore } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Dispatch, useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { updateItemIntoList } from \"../../entities/List\";\nimport { IItem, IList, STATUS_REMOVED, STATUS_RESTORED } from \"../../interfaces\";\nimport { updateItemIntoListAction } from \"../../store/actionCreators\";\nimport { getItem } from \"../../store/selectors\";\nimport { ItemInfoPopup } from \"../ItemInfoPopup/ItemInfoPopup\";\nimport { ItemsListBtn } from \"../ItemsListBtn/ItemsListBtn\";\n\nexport function ItemsListItem(props: any) {\n    const item: any = useSelector(getItem(props.item.key, props.list.key));\n    const [val, setVal] = useState(item.title);\n\n    const [showPopup, setShowPopup] = useState(false);\n    const dispatch: Dispatch<any> = useDispatch()\n\n    const updateItem = useCallback(\n      (list: IList) => dispatch(updateItemIntoListAction(list)),\n      [dispatch]\n    )\n\n    function toggleDoneHandler(item: IItem) {\n      item.done = !item.done;\n      updateItem(updateItemIntoList(props.list, item));\n    }\n  \n    function removeHandler(item: IItem) {\n      item.status = STATUS_REMOVED;\n      updateItem(updateItemIntoList(props.list, item));\n    }\n  \n    function restoreHandler(item: IItem) {\n      item.status = STATUS_RESTORED;\n      updateItem(updateItemIntoList(props.list, item));\n    }\n\n    function inputOnChange(val: React.ChangeEvent<HTMLInputElement>) {\n        item.title = val.target.value;\n        setVal(val.target.value);\n        updateItem(updateItemIntoList(props.list, item));\n      }\n\n    function infoHandler() {\n        setShowPopup(true);\n    }\n\n    let style = 'list__item';\n    let icon = faSquare;\n    let isDisabled = false\n    if (item.done) {\n      style += ' done';\n      icon = faCheckSquare;\n    }\n    if (item.status === STATUS_REMOVED) {\n      style += ' removed';\n      isDisabled = true;\n    }\n    return (<div className={style} key={item.key} >\n      <span className=\"icon\" onClick={() => {\n      if(item.status !== STATUS_REMOVED) {\n        toggleDoneHandler(item);\n      }\n    }}>\n        <FontAwesomeIcon icon={icon} />\n      </span>\n      <input disabled={isDisabled} type=\"text\" className=\"text-input\" value={val} onChange={inputOnChange}/>\n      <div className=\"button-area\">\n         <ItemsListBtn\n          className=\"icon-info\"\n          handler={() => {\n            infoHandler();\n          }}\n          item={item}\n          fontAwesomIconLink={faInfoCircle}\n        />\n        <ItemsListBtn\n          className=\"icon-trash\"\n          handler={() => {\n            removeHandler(item);\n          }}\n          item={item}\n          fontAwesomIconLink={faTrash}\n        />\n        <ItemsListBtn\n          className=\"icon-restore\"\n          handler={() => {\n            restoreHandler(item);\n          }}\n          item={item}\n          fontAwesomIconLink={faTrashRestore}\n        />\n\n      </div>\n      <ItemInfoPopup\n      item={item}\n      list={props.list}\n      closeHandler={(item: string) =>{\n          setShowPopup(false);\n          setVal(item);\n      }}\n      show={showPopup}/>\n    </div>)\n}","\nimport { IItem } from \"../../interfaces\";\nimport { ItemsListItem } from \"../ItemsListItem/ItemsListItem\";\n\nexport function ItemsList(props: any) {\n  return (<div className=\"list\">\n    {\n      props.items.map((item: IItem) => {\n        return <ItemsListItem key={item.key} item={item} list={props.list} />\n      })\n    }\n  </div>);\n}","import {useState } from 'react';\nimport './ListAddPopup.scss';\n\nexport function ListAddPopup(props: any) {\n\n    const [val, setVal] = useState('');\n    function titleOnChange(val: React.ChangeEvent<HTMLInputElement>) {\n        setVal(val.target.value);\n    }\n\n    let fragment = <></>;\n    if(props.show) {\n        fragment =  <div className=\"item-info-popup active\">\n        <div className=\"item-info-popup__overlay\">\n            <div className=\"item-info-popup__container\">\n                <div className=\"item-info-popup__header\">\n                    <span className=\"icon icon-close\">\n                        \n                    </span>\n                </div>\n                <div className=\"item-info-popup__body\">\n                    <input type=\"text\" className=\"text-input-popup\" defaultValue={val} onChange={titleOnChange}/>\n                 \n                </div>\n                <div className=\"item-info-popup__bottom\">\n                    <div className=\"btn-area\">\n                        <button className=\"btn\" onClick={() => {\n                                props.closeHandler(val);\n                                setVal('')\n                            }}>\n                            Create list\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>;\n    }\n    return (<>{fragment}</>);\n}","\nimport { AddInput } from '../AddInput/AddInput'\nimport './App.scss';\nimport { IItem, STATUS_REMOVED, IList } from '../../interfaces';\nimport { ItemsList } from '../ItemsList/ItemsList';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCurrentListId, getList, getLists } from '../../store/selectors';\nimport { ListAddPopup } from '../ListAddPopup/ListAddPopup';\nimport { Dispatch, useCallback, useState } from 'react';\nimport { createList } from '../../entities/List/List';\nimport { addListAction, setCurrentListIdAction } from '../../store/actionCreators';\n\nfunction App() {\n  const dispatch: Dispatch<any> = useDispatch()\n  const addList = useCallback(\n    (list: IList) => dispatch(addListAction(list)),\n    [dispatch]\n  )\n  const setCurrentListId = useCallback(\n    (listId: number) => dispatch(setCurrentListIdAction(listId)),\n    [dispatch]\n  )\n  const lists: IList[] = useSelector(getLists);\n  const currentListId: number = useSelector(getCurrentListId);\n  const list = useSelector(getList(currentListId));\n  const items: IItem[] = list.items;\n  const activeItems: IItem[] = [];\n  const removedItems: IItem[] = [];\n  const [showPopup, setShowPopup] = useState(false);\n  \n  \n  items.forEach((item: IItem) => {\n    if(item.status !== STATUS_REMOVED) {\n      activeItems.push(item);\n    } else {\n      removedItems.push(item);\n    }\n  });\n\n  function addListHandler() {\n    setShowPopup(true);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"left-container\">\n        {\n          lists.map((e:IList) => {\n            return <div key={e.key} className=\"list-btn\" onClick={() => {\n              setCurrentListId(e.key)\n            }}>\n            {e.title}\n          </div>\n          })\n        }\n\n        <div className=\"add-list-btn\" onClick={() => {\n          addListHandler();\n        }}>\n          Create list\n        </div>\n      </div>\n        <div className=\"right-container\">\n\n          <AddInput listId={list.key} />\n          <ItemsList\n            items={activeItems}\n            list={list}\n          />\n          <ItemsList\n            items={removedItems}\n            list={list}\n          />\n        </div>\n        <ListAddPopup\n      closeHandler={(title: string) =>{\n          setShowPopup(false);\n          addList(createList(title));\n      }}\n      show={showPopup}/>\n    </div>\n   \n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from \"./actionTypes\"\nimport { listIdGen } from \"../services/IdGen/IdGen\";\nimport { CurrentListIdAction, CurrentListIdState, IList, ListAction, ListState } from \"../interfaces\";\nimport { defaultItemData } from \"../entities/Item\";\n\n\nlet date = new Date();\nlet defaultListData1: IList[] = [{\n  key: listIdGen.get(),\n  title: \"first\",\n  status: '',\n  comment: '',\n  datetime: date.toISOString(),\n  items: defaultItemData\n}]\n\n\nconst listsReducer = (\n  state: ListState = {lists: defaultListData1},\n  action: ListAction\n): ListState => {\n  switch (action.type) {\n    case actionTypes.ADD_LIST:\n      return {\n        ...state,\n        lists: state.lists.concat(action.list)\n      }\n    case actionTypes.UPDATE_LIST:\n      const updatedLists: IList[] = state.lists.map((e:IList) => {\n        if (action.list.key === e.key) {\n          e = action.list\n        };\n        return e;\n      });\n      return {\n        ...state,\n        lists: updatedLists,\n      }\n  }\n  return state\n}\n\nconst listIdReducer = (\n  state: CurrentListIdState = { currentListId: 1},\n  action: CurrentListIdAction\n): CurrentListIdState => {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_LIST_ID:\n      return {\n        ...state,\n        currentListId: action.listId\n      }\n\n  }\n  return state\n}\n\n\nexport { listsReducer, listIdReducer}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore, applyMiddleware, combineReducers } from \"redux\"\n\nimport thunk from \"redux-thunk\"\nimport { Provider } from 'react-redux'\nimport { listsReducer, listIdReducer } from \"./store/reducer\"\n\n\nconst store = createStore(combineReducers({lists: listsReducer, currentListId: listIdReducer}), applyMiddleware(thunk))\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}